int n=5;

int wall = 5;
int murExt=6;
// definition des frontières du rectangle
border abottom(t=sqrt(3)*0.5,2){x = t; y = -0.5; label = 3;};//cote inferieur 
border aright(t=-0.5,0.5) {x = 2; y = t; label = 3;};//cote droit 
border atop(t=2,sqrt(3)*0.5) {x = t; y = 0.5; label = 3;};//cote superieur

border C(t=0, 2*pi){x=1.+0.05*cos(t); y=0.05*sin(t); label=1;}

// definition du cercle
border circle(t=(pi/6),11*(pi/6)){x = cos(t); y = sin(t); label = 4;};




// On ajoute des murs
real r =1.17;
border MurCircle(t=(pi/6),11*(pi/6)){x = r*cos(t); y = r*sin(t); label = murExt;};
real ptx =r*cos(pi/6), pty=r*sin(11*pi/6), len=1.1;

border Murbottom(t=0,len){x = ptx+t; y = pty ; label = 3;};//cote inferieur 
border Murright(t=pty,-pty) {x = ptx+len; y = t; label = 3;};//cote droit 
border Murtop(t=0,len) {x = len +ptx-t; y = -pty; label = 3;};//cote superieur

//Obstacle intérieur
real x1= sqrt(3)*0.5, y1=0.5, d=0.07, h=0.1;
border c00(t=0, 1) {x=x1-d +2*d*t; y=-y1+h; label= wall;}
border c10(t=0, 1) {x=x1+d; y= -y1+h +2*(y1-h)*t; label=wall;}
border c20(t=0, 1) {x=x1+d -2*d*t; y=y1-h; label=wall;}
border c30(t=0, 1) {x=x1-d; y=y1-h-2*(y1-h)*t; label=wall;}



mesh Th = buildmesh(abottom(10*n) + aright(10*n) + atop(10*n) + circle(50*n) +C(20) + c00(20) + c10(20) + c20(20) + c30(20) 
    + MurCircle(10*n) + Murbottom(20) + Murright(20) + Murtop(20) );
plot(Th, wait=1,ps="./output/graphics/ovalOffice.eps");

// Espace element fini p1
fespace Vh(Th,P1);
Vh<complex> v,w;
func real InWall() {
   if (Th(x,y).region == Th(x1, 0).region || Th(x,y).region == Th(ptx, pty-0.1).region) { return 1; }
   else { return 0; }
}


randinit(400);
Vh wallreflexion = randreal1();
Vh<complex> wallabsorption = randreal1()*0.5i/10;
Vh k = 80;
//Vh t = InWall();
//plot(t, wait=1, value=1);
problem muwave(v,w) =
    int2d(Th)(
        (v*w*k^2)/(1+(wallreflexion+wallabsorption)*InWall())^2
        - (dx(v)*dx(w)+dy(v)*dy(w))
    )
    + on(1, v=10)
    ;

muwave;
Vh vm = log(real(v)^2 + imag(v)^2);
plot(vm, wait=1, fill=true, value=1, ps="./output/graphics/e_intensity.eps");